---
description: 
globs: 
alwaysApply: false
---
# .NET Backend Development Guidelines

You are an experienced .NET backend developer and an expert in C#, ASP.NET Core, and Entity Framework Core.

## Code Style and Structure
- Write concise, idiomatic C# code with precise examples.
- Follow .NET and ASP.NET Core conventions and best practices.
- Apply object-oriented and functional programming patterns as appropriate.
- Prefer LINQ and lambda expressions for collection operations.
- Use descriptive variable and method names (e.g., 'IsUserSignedIn', 'CalculateTotal').
- Structure files according to .NET conventions (Controllers, Models, Services, etc.).

## Naming Conventions
- Use PascalCase for class names, methods, and public members.
- Use camelCase for local variables and private fields.
- Use UPPERCASE for constants.
- Add the "I" prefix to interface names (e.g., 'IUserService').

## C# and .NET Usage
- Leverage C# 10+ features when appropriate (record types, pattern matching, null-coalescing assignment).
- Utilize built-in ASP.NET Core functions and middleware.
- Effectively use Entity Framework Core for database operations.

## Syntax and Formatting
- Follow C# coding conventions (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)
- Use expressive C# syntax (null conditional operators, string interpolation)
- Use 'var' for implicit typing when the type is obvious.

## Error Handling and Validation
- Use exceptions for exceptional cases, not for flow control.
- Implement proper error logging using built-in .NET logging or external logger.
- Use Fluent Validation for model validation.
- Implement global exception handling in middleware.
- Return appropriate HTTP status codes and consistent error responses.

## API Design
- Follow RESTful API design principles.
- Use attribute routing in controllers.
- Implement API versioning.
- Apply action filters for cross-cutting concerns.

## Performance Optimization
- Use asynchronous programming with async/await for I/O-bound operations.
- Implement caching strategies using IMemoryCache or distributed caching.
- Apply efficient LINQ queries and avoid N+1 query problems.
- Implement pagination for large data sets.

## Key Conventions
- Apply Dependency Injection for loose coupling and testability.
- Implement the repository pattern or use Entity Framework Core directly, depending on complexity.
- Use AutoMapper for object mapping if needed.
- Implement background tasks using IHostedService or BackgroundService.

## Testing
- Write unit tests using xUnit
- Use Moq for dependency mocking.
- Implement integration tests for API endpoints.

## API Documentation
- Use Swagger/OpenAPI for API documentation (according to the installed Swashbuckle.AspNetCore package).
- Provide XML comments for controllers and models to enrich Swagger documentation.

## Supabase Integration
- Implement validation of JWT tokens issued by Supabase Auth according to their format and signature algorithms.
- Configure middleware for automatic JWT token validation in API requests.
- Use `[Authorize]` attributes on controllers/methods requiring authentication.
- Do not implement custom login/registration logic - the backend only validates tokens generated by Supabase Auth.
- Utilize the System.IdentityModel.Tokens.Jwt library to handle tokens.
- Store appropriate Supabase keys/certificates in secure configuration.

## Entity Framework Core with Npgsql
- Add appropriate dependencies: `Npgsql.EntityFrameworkCore.PostgreSQL`.
- Configure DbContext with appropriate Npgsql configuration.
- Use EF Core migrations to manage database schema.
- Implement efficient LINQ queries considering PostgreSQL specifics.
- Configure indexes appropriate for the most common queries (e.g., searching for topics for revision).
- Avoid entity tracking by DbContext for read-only queries.
- Implement eager loading (Include) for navigation between related entities.

## Domain Modeling
- Create domain models according to the PRD: `Scope`, `Topic`, `RevisionSchedule`.
- Implement relationships according to the data model and functional requirements.
- Model business logic for the revision algorithm according to the PRD specification.
- Design data structures optimal for the most common queries (e.g., list of topics for revision today).
- Implement validation of required fields and length limits according to the PRD (e.g., Scope name max 150 characters).

Follow Microsoft's official documentation and ASP.NET Core guidelines for best practices regarding routing, controllers, models, and other API components.